// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String               @default("") @db.VarChar(50)
  userName           String               @unique @db.VarChar(50)
  email              String               @unique
  password           String?
  profileImg         String?
  googleId           String?              @unique
  avatar             String?
  points             Int                  @default(0)
  rank               Int                  @default(0)
  Problem            Problem[]
  Submission         Submission[]
  OngoingProblem     OngoingProblem[]
  Contest            Contest[]
  ContestParticipant ContestParticipant[]
}

model Problem {
  id                  String          @id @default(uuid())
  problemNumber       Int             @unique
  title               String          @unique @db.VarChar(50)
  slug                String          @unique
  difficultyLevel     difficultyLevel
  description         String          @db.VarChar(1000)
  functionStructure   String          @db.VarChar(1000)
  boilerplateCode     String
  submissionCode      String
  sampleTestCasesKey  String // URL to the sample test cases JSON in S3
  testCasesKey        String // URL to the test cases JSON in S3
  constraints         Constraint[]
  topicTags           TopicTag[]
  hints               Hint[]
  testCasesCount      Int             @default(0)
  likeCount           Int             @default(0)
  submissionCount     Int             @default(0)
  acceptedSubmissions Int             @default(0)
  approved            Boolean         @default(false)
  createdAt           DateTime        @default(now())
  createdById         String
  createdBy           User            @relation(fields: [createdById], references: [id])
  submissions         Submission[]

  ContestProblem ContestProblem[]
}

model OngoingProblem {
  id        String @id @default(uuid())
  problemId String
  userId    String
  solutions String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Constraint {
  id        String  @id @default(uuid())
  content   String
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TopicTag {
  id       String    @id @default(uuid())
  content  String
  problems Problem[]
}

model Hint {
  id        String  @id @default(uuid())
  content   String
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Submission {
  id              String           @id @default(uuid())
  problemId       String
  problem         Problem          @relation(fields: [problemId], references: [id])
  code            String
  languageId      String
  difficultyLevel difficultyLevel
  points          Int?
  status          submissionStatus
  createdAt       DateTime         @default(now())
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id])
}

model Contest {
  id           String               @id @default(uuid())
  title        String               @db.VarChar(100)
  description  String               @db.VarChar(1000)
  startTime    DateTime
  endTime      DateTime
  status       ContestStatus        @default(Scheduled)
  visibility   ContestVisibility    @default(Public)
  createdById  String
  createdBy    User                 @relation(fields: [createdById], references: [id], onDelete: Cascade)
  problems     ContestProblem[]
  participants ContestParticipant[]
  linkToken    String               @unique
  points       Int                  @default(0)
  createdAt    DateTime             @default(now())
}

model ContestProblem {
  id                String              @id @default(uuid())
  contestId         String
  contest           Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problemId         String
  problem           Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  points            Int                 @default(0) // Points for solving this problem
  order             Int                 @default(1)
  ContestSubmission ContestSubmission[]

  @@unique([contestId, problemId])
}

model OngoingContestProblem {
  id               String             @id @default(uuid())
  contestProblemId String
  solutions        String
  participantId    String
  participant      ContestParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model ContestSubmission {
  id                     String             @id @default(uuid())
  contestProblemId       String
  contestProblem         ContestProblem     @relation(fields: [contestProblemId], references: [id], onDelete: Cascade)
  code                   String
  languageId             String
  difficultyLevel        difficultyLevel
  points                 Int?
  status                 submissionStatus
  createdAt              DateTime           @default(now())
  createdByParticipantId String
  createdByParticipant   ContestParticipant @relation(fields: [createdByParticipantId], references: [id], onDelete: Cascade)
}

model ContestParticipant {
  id        String   @id @default(uuid())
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int      @default(0) // Participant's total score in the contest
  joinedAt  DateTime @default(now())

  OngoingContestProblem OngoingContestProblem[]
  ContestSubmission     ContestSubmission[]
}

enum difficultyLevel {
  Basic
  Easy
  Medium
  Hard
}

enum submissionStatus {
  Accepted          @map("Accepted")
  Rejected          @map("Rejected")
  Pending           @map("Pending")
  CompilationError  @map("Compilation Error")
  RunTimeError      @map("Run Time Error")
  TimeLimitExceeded @map("Time Limit Exceeded")
}

enum ContestStatus {
  Scheduled
  Ongoing
  Completed
}

enum ContestVisibility {
  Public
  Private
}